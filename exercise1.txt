1. Create a repository
$ mkdir git_exercise
$ cd git_exercise
$ git init

$ git add .
$ git commit -m 'made exercise1.txt'

2. Make some changes -- add some files, change content of some files
$ touch file1.txt
$ echo 'content of file1' > file1.txt

3. commit changes
$ git add .
$ git commit -m 'add file1.txt'

4. repeat steps 1-3 for 2 more times. try to remove and ignore some files . Use git diff before each commit.
## file2 added
$ touch file2.txt
$ echo 'content of file2' > file2.txt
$ git diff
$ git add .
$ git commit -m 'add file2.txt'

## file1 modified
$ git diff
$ git add .
$ git commit -m 'file1.txt modified'

## ignore file2
$ touch .gitignore
$ git add .
$ git commit -m 'add .gitignore'

$ echo 'file1.txt' > .gitignore


5. create changes and revert those changes using git when those changes are not added to staging are
$ echo 'bbbbb' > file2.txt 
$ git co file2.txt


6. create changes and revert those changes after adding changes to staging area
$ echo 'cccccc' > file2.txt
$ git diff
$ git add file2.txt
$ git reset HEAD file2.txt


7. create change and revert those changes after committing those changes .
$ echo 'dddddddddd' > file2.txt
$ git add .
$ git commit -m 'modified file2.txt'

$ git revert HEAD


8. Check repository status before adding changes to staging area, after adding changes to staging area and after committing changes .
$ git status

$ git add .

$ git status


9. Display all the commits .
$ git log


10. Display a specific commit .
$ git show <commmit_hash>


11. create branches called "feature1" and "feature2" from master. 11 . Delete branch "feature2".
$ git brancg feature1
$ git branch feature2
$ git branch -d feature2

12. Make some commits on "feature1".
$ git checkout feature1
$ mkdir feature1
$ touch feature1/file_a.txt
$ echo 'content for file_a of feature1' > feature1/file_a.txt
$ git add .
$ git commit -m 'feature1/file_a.txt addde'
$ echo 'sssssss' > file2.txt 
$ git add .
$ git commit -m 'file2.txt modified'


13. Make some commits on branch "master".
## file2.txt modified
$ git add .
$ git commit -m 'file2.txt modeified'

14. merge branch "feature1" in "master" (make some conflicts by changing same file on same line in both the branches) 15.create branch "feature2" from master .
$ git checkout master
$ git merge feature1
## resolving conflict
$ git add .
$ git commit

$ git co -b feature2


15. Make some commits on "feature2".
$ mkdir feature2
$ touch feature2/file_x.txt
$ echo 'content of feature2/file_x.txt' > feature2/file_x.txt
$ git add .
$ git commit -m 'added feature2/file_x.txt'

#modified file2.txt
$ git add .
$ git commit -m 'modified file2.txt'


16. Make some commits on branch "master".
$ git checkout master
$ git add .
$ git commit -m 'modified file2.txt'


17. rebase branch "master" in "feature2" (make some conflicts by changing same file on same line in both the branches) .
$ git rebase feature2

## resloving conflicts
git add file2.txt
git rebase --continue


18. find the differences between "merge" and "rebase" in above cases.
merge - when a branch is merger it creater a merge commit.
rebase - nothing like merge commit is created, rather each different commit a from branch is plucked chronologically and reattachd to different commit in the rebased branch.

merge - should only be used for major changes, like addition of new feature
rebase - should be used for minor changes


19. Use git stash
## file2.txt changes manually
$ git stash save 'stash changes'
$ git co -b 'stash_changes'
$ git stash pop
$ git add .
$ git commit -m 'stashed changes added'
